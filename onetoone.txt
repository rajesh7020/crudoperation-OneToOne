pom.xml
----------------------------------------------------------------------------------------------------------------------------
 <properties>
    <org.springframework.version>4.1.6.RELEASE</org.springframework.version>
 </properties>
<dependencies>
		<dependency>
		    <groupId>org.springframework</groupId>
		    <artifactId>spring-core</artifactId>
		    <version>${org.springframework.version}</version>
		</dependency>
		<dependency>
		    <groupId>org.springframework</groupId>
		    <artifactId>spring-beans</artifactId>
		    <version>${org.springframework.version}</version>
		</dependency>
		<dependency>
		    <groupId>org.springframework</groupId>
		    <artifactId>spring-context</artifactId>
		    <version>${org.springframework.version}</version>
		</dependency>
		<dependency>
		    <groupId>org.springframework</groupId>
		    <artifactId>spring-web</artifactId>
		    <version>${org.springframework.version}</version>
		</dependency>
		<dependency>
		    <groupId>org.springframework</groupId>
		    <artifactId>spring-webmvc</artifactId>
		    <version>${org.springframework.version}</version>
		</dependency>
		<dependency>
		    <groupId>org.springframework</groupId>
		    <artifactId>spring-jdbc</artifactId>
		    <version>${org.springframework.version}</version>
		</dependency>
		<dependency>
		    <groupId>org.springframework</groupId>
		    <artifactId>spring-orm</artifactId>
		    <version>${org.springframework.version}</version>
		</dependency>
		<!-- Hibernate Resources -->
		<dependency>
		    <groupId>org.hibernate</groupId>
		    <artifactId>hibernate-entitymanager</artifactId>
		    <version>5.3.7.Final</version>
		</dependency>
		<dependency>
		    <groupId>org.hibernate</groupId>
		    <artifactId>hibernate-validator</artifactId>
		    <version>4.3.0.Final</version>
		</dependency>
		<dependency>
		    <groupId>org.hibernate</groupId>
		    <artifactId>hibernate-commons-annotations</artifactId>
		    <version>3.3.0.ga</version>
		</dependency>
		<dependency>
		    <groupId>org.hibernate</groupId>
		    <artifactId>hibernate-annotations</artifactId>
		    <version>3.3.1.GA</version>
		</dependency>
		<dependency>
		    <groupId>org.hibernate</groupId>
		    <artifactId>hibernate-core</artifactId>
		    <version>3.3.2.GA</version>
		</dependency>
		<dependency>
		    <groupId>taglibs</groupId>
		    <artifactId>standard</artifactId>
		    <version>1.1.2</version>
		</dependency>
		<dependency>
		    <groupId>javax.servlet</groupId>
		    <artifactId>jstl</artifactId>
		    <version>1.1.2</version>
		</dependency>
		<dependency>
			<groupId>org.codehaus.jackson</groupId>
			<artifactId>jackson-mapper-asl</artifactId>
			<version>1.9.13</version>
		</dependency>
		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-databind</artifactId>
			<version>2.5.3</version>
		</dependency>
		<!-- https://mvnrepository.com/artifact/javax.persistence/javax.persistence-api -->
		<dependency>
		    <groupId>javax.persistence</groupId>
		    <artifactId>javax.persistence-api</artifactId>
		    <version>2.2</version>
		</dependency>
		<dependency>
		    <groupId>commons-dbcp</groupId>
		    <artifactId>commons-dbcp</artifactId>
		    <version>20030825.184428</version>
		</dependency>
		<dependency>
		    <groupId>commons-pool</groupId>
		    <artifactId>commons-pool</artifactId>
		    <version>20030825.183949</version>
		</dependency>
		<!-- MYSQL DB -->
		<dependency>
		    <groupId>mysql</groupId>
		    <artifactId>mysql-connector-java</artifactId>
		    <version>8.0.12</version>
		</dependency>
		<!-- Log4j -->
		<dependency>
		    <groupId>log4j</groupId>
		    <artifactId>log4j</artifactId>
		    <version>1.2.14</version>
			<type>jar</type>
			<scope>compile</scope>
		</dependency>
		</dependencies>
		
------------------------------------------------------------------------------------------------------------------------<!--<!-- 

https://mvnrepository.com/artifact/org.postgresql/postgresql -->
<dependency>
    <groupId>org.postgresql</groupId>
    <artifactId>postgresql</artifactId>
    <version>42.2.5</version>
</dependency>

		
	
----------------------------------------------------------------------------------------------------------------------------
Category.java	
-----------------------------------------------------------------------------------------------------------------------------
package com.rajesh.model;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Table;

@Entity
@Table(name="category")
public class Category {
	@Id
	@GeneratedValue(strategy=GenerationType.AUTO)
	@Column(name="cid")
	private int cid;
	@Column
	private String categoryname;
	public int getCid() {
		return cid;
	}
	public void setCid(int cid) {
		this.cid = cid;
	}
	public String getCategoryname() {
		return categoryname;
	}
	public void setCategoryname(String categoryname) {
		this.categoryname = categoryname;
	}
	@Override
	public String toString() {
	    return this.getCategoryname();
	}
}

----------------------------------------------------------------------------------------------------------------------------
Product.java
----------------------------------------------------------------------------------------------------------------------------
package com.rajesh.model;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.OneToOne;
import javax.persistence.Table;

@Entity
@Table(name="product")
public class Product {
	@Id
	@GeneratedValue(strategy=GenerationType.AUTO)
	@Column(name="pid")
	private int pid;
	@Column
	private String name;
	@Column
	private String code;
	@Column
	private double price;
	@Column
	private String unit;
	@OneToOne
	@JoinColumn(name="cid")
	private Category category;
	public int getPid() {
		return pid;
	}
	public void setPid(int pid) {
		this.pid = pid;
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public String getCode() {
		return code;
	}
	public void setCode(String code) {
		this.code = code;
	}
	public double getPrice() {
		return price;
	}
	public void setPrice(double price) {
		this.price = price;
	}
	public String getUnit() {
		return unit;
	}
	public void setUnit(String unit) {
		this.unit = unit;
	}
	public Category getCategory() {
		return category;
	}
	public void setCategory(Category category) {
		this.category = category;
	}
}
---------------------------------------------------------------------------------------------------------------------------
CategoryDao.java - Interface
---------------------------------------------------------------------------------------------------------------------------
package com.rajesh.dao;
import java.util.List;
import com.rajesh.model.Category;

public interface CategoryDao {
	 public void addCategory(Category category); 
	 public List<Category> getCategories();
	 public Category getCategory(int cid);
	 public void deleteCategory(int cid);
}

----------------------------------------------------------------------------------------------------------------------------
ProductDao.java - Interface
----------------------------------------------------------------------------------------------------------------------------
package com.rajesh.dao;
import java.util.List;
import com.rajesh.model.Product;

public interface ProductDao {
	 public void addProduct(Product product);
	 public List<Product> getProducts();
	 public Product getProduct(int pid);
	 public void deleteProduct(int pid);
}


----------------------------------------------------------------------------------------------------------------------------
CategoryDaoImpl.java
----------------------------------------------------------------------------------------------------------------------------
package com.rajesh.daoImpl;

import java.util.List;

import org.hibernate.SessionFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

import com.rajesh.dao.CategoryDao;
import com.rajesh.model.Category;

@Repository
public class CategoryDaoImpl implements CategoryDao{
	@Autowired
	SessionFactory sessionFactory;
	@Override
	public void addCategory(Category category) {
		sessionFactory.getCurrentSession().saveOrUpdate(category);
	}
	@SuppressWarnings("unchecked")
	@Override
	public List<Category> getCategories() {
		return sessionFactory.getCurrentSession().createCriteria(Category.class).list();
	}
	@Override
	public Category getCategory(int cid) {
		return (Category)sessionFactory.getCurrentSession().get(Category.class, cid);
	}
	@Override
	public void deleteCategory(int cid) {
		sessionFactory.getCurrentSession().createQuery("DELETE FROM Category WHERE cid="+cid).executeUpdate();
	}
}


----------------------------------------------------------------------------------------------------------------------------
ProductDaoImpl.java
----------------------------------------------------------------------------------------------------------------------------
package com.rajesh.daoImpl;
import java.util.List;
import org.hibernate.SessionFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;
import com.rajesh.dao.ProductDao;
import com.rajesh.model.Product;

@Repository
public class ProductDaoImpl implements ProductDao{
	@Autowired
	SessionFactory sessionFactory;
	@Override
	public void addProduct(Product product) {
		sessionFactory.getCurrentSession().saveOrUpdate(product);
	}
	@SuppressWarnings("unchecked")
	@Override
	public List<Product> getProducts() {
		return sessionFactory.getCurrentSession().createCriteria(Product.class).list();
	}
	@Override
	public Product getProduct(int pid) {
		return (Product)sessionFactory.getCurrentSession().get(Product.class, pid);
	}
	@Override
	public void deleteProduct(int pid) {
		sessionFactory.getCurrentSession().createQuery("DELETE FROM Product WHERE pid="+pid).executeUpdate();
	}
}


----------------------------------------------------------------------------------------------------------------------------
CategoryService.java - Interface
----------------------------------------------------------------------------------------------------------------------------
package com.rajesh.service;
import java.util.List;
import com.rajesh.model.Category;

public interface CategoryService {
	 public void addCategory(Category category); 
	 public List<Category> getCategories();
	 public Category getCategory(int cid);
	 public void deleteCategory(int cid);
}

----------------------------------------------------------------------------------------------------------------------------
ProductService.java - Interface 
----------------------------------------------------------------------------------------------------------------------------
package com.rajesh.service;
import java.util.List;
import com.rajesh.model.Product;

public interface ProductService {
	 public void addProduct(Product product);
	 public List<Product> getProducts();
	 public Product getProduct(int pid);
	 public void deleteProduct(int pid);
}

---------------------------------------------------------------------------------------------------------------------------
CategoryServiceImpl.java
---------------------------------------------------------------------------------------------------------------------------
package com.rajesh.serviceImpl;
import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import com.rajesh.dao.CategoryDao;
import com.rajesh.model.Category;
import com.rajesh.service.CategoryService;

@Service
@Transactional
public class CategoryServiceImpl implements CategoryService{
	@Autowired
	private CategoryDao categoryDao;
	@Override
	public void addCategory(Category category) {
		categoryDao.addCategory(category);
	}
	@Override
	public List<Category> getCategories() {
		return categoryDao.getCategories();
	}
	@Override
	public Category getCategory(int cid) {
		return categoryDao.getCategory(cid);
	}
	@Override
	public void deleteCategory(int cid) {
		categoryDao.deleteCategory(cid);
	}
}

----------------------------------------------------------------------------------------------------------------------------
ProductServiceImpl.java
----------------------------------------------------------------------------------------------------------------------------
package com.rajesh.serviceImpl;
import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;
import com.rajesh.dao.ProductDao;
import com.rajesh.model.Product;
import com.rajesh.service.ProductService;

@Service
@Transactional(propagation=Propagation.SUPPORTS, readOnly=true)
public class ProductServiceImpl implements ProductService{
	@Autowired
	private ProductDao productDao;
	@Override
	@Transactional(propagation=Propagation.REQUIRED, readOnly=false)
	public void addProduct(Product product) {
		productDao.addProduct(product);
	}
	@Override
	public List<Product> getProducts() {
		return productDao.getProducts();
	}
	@Override
	public Product getProduct(int pid) {
		return productDao.getProduct(pid);
	}
	@Override
	public void deleteProduct(int pid) {
		productDao.deleteProduct(pid);
	}
}


----------------------------------------------------------------------------------------------------------------------------
CategoryController.java
----------------------------------------------------------------------------------------------------------------------------
package com.rajesh.controller;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.servlet.ModelAndView;
import com.rajesh.model.Category;
import com.rajesh.service.CategoryService;
import com.rajesh.service.ProductService;

@Controller
public class CategoryController {
	@Autowired
	private CategoryService categoryService;
	@Autowired
	private ProductService productService;
	@RequestMapping(value="/saveCategory", method=RequestMethod.POST)
	public ModelAndView saveCategory(@ModelAttribute("command") Category category, BindingResult result) {
		categoryService.addCategory(category);
		return new ModelAndView("redirect:/addCategory.html");
	}
	@RequestMapping(value="/addCategory", method=RequestMethod.GET)
	public ModelAndView addCategory(@ModelAttribute("command") Category category, BindingResult result) {
		Map<String, Object> model = new HashMap<String, Object>();
		model.put("categories", categoryService.getCategories());
		return new ModelAndView("addCategory", model);
	}
	@RequestMapping(value="/editCategory", method=RequestMethod.GET)
	public ModelAndView editCategory(@ModelAttribute("command") Category category, BindingResult result) {
		Map<String,Object> model = new HashMap<String, Object>();
		model.put("category", categoryService.getCategory(category.getCid()));
		model.put("categories", categoryService.getCategories());
		return new ModelAndView("addCategory", model);
	}
	@RequestMapping(value="/deleteCategory", method=RequestMethod.GET)
	public ModelAndView deleteCategory(@ModelAttribute("command") Category category, BindingResult result) {
		categoryService.deleteCategory(category.getCid());
		Map<String,Object> model = new HashMap<String, Object>();
		model.put("categories", categoryService.getCategories());
		return new ModelAndView("redirect:/addCategory.html", model);
	}
	@RequestMapping(value="/categories", method=RequestMethod.GET)
	public List<Category> getCategries() {
		return categoryService.getCategories();
	}
}
----------------------------------------------------------------------------------------------------------------------------
ProductController.java
----------------------------------------------------------------------------------------------------------------------------
package com.rajesh.controller;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.servlet.ModelAndView;
import com.rajesh.model.Product;
import com.rajesh.service.CategoryService;
import com.rajesh.service.ProductService;

@Controller
public class ProductController {
	@Autowired
	private CategoryService categoryService;
	@Autowired
	private ProductService productService;
	@RequestMapping(value="/saveProduct", method=RequestMethod.POST)
	public ModelAndView saveProduct(@ModelAttribute("command") Product product, BindingResult result) {
		productService.addProduct(product);
		return new ModelAndView("redirect:/addProduct.html");
	}
	@RequestMapping(value="/addProduct", method=RequestMethod.GET)
	public ModelAndView addProduct(@ModelAttribute("command") Product product,BindingResult result) {
		Map<String,Object> model = new HashMap<String,Object>();
		model.put("products", productService.getProducts());
		model.put("categories", categoryService.getCategories());
		return new ModelAndView("addProduct", model);
	}
	@RequestMapping(value="/deleteProduct",method=RequestMethod.GET)
	public ModelAndView deleteProduct(@ModelAttribute("command") Product product, BindingResult ressult) {
		productService.deleteProduct(product.getPid());
		Map<String,Object> model = new HashMap<String,Object>();
		model.put("products", productService.getProducts());
		model.put("categories", categoryService.getCategories());
		return new ModelAndView("redirect:/addProduct.html", model);
	}
	@RequestMapping(value="/editProduct", method=RequestMethod.GET)
	public ModelAndView editProduct(@ModelAttribute("command") Product product, BindingResult result) {
		Map<String, Object> model = new HashMap<String,Object>();
		model.put("product", productService.getProduct(product.getPid()));
		model.put("products", productService.getProducts());
		model.put("categories", categoryService.getCategories());
		return new ModelAndView("addProduct",model);
	}
	@RequestMapping(value="/products", method=RequestMethod.GET)
	public List<Product> getProducts() {
		return productService.getProducts();
	}
}


----------------------------------------------------------------------------------------------------------------------------
hibernate.cfg.xml - src/main/resources
----------------------------------------------------------------------------------------------------------------------------
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-configuration PUBLIC
    "-//Hibernate/Hibernate Configuration DTD//EN"
    "http://hibernate.sourceforge.net/hibernate-configuration-3.0.dtd"> 
<hibernate-configuration>
    <session-factory>        
        <mapping class="com.rajesh.model.Category" />
        <mapping class="com.rajesh.model.Product" />
    </session-factory>         
</hibernate-configuration>

----------------------------------------------------------------------------------------------------------------------------
log4j.xml - src/main/resources
----------------------------------------------------------------------------------------------------------------------------
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE log4j:configuration PUBLIC "-//APACHE//DTD LOG4J 1.2//EN" "log4j.dtd">
<log4j:configuration xmlns:log4j="http://jakarta.apache.org/log4j/">
	<!-- Appenders -->
	<appender name="console" class="org.apache.log4j.ConsoleAppender">
		<param name="Target" value="System.out" />
		<layout class="org.apache.log4j.PatternLayout">
			<param name="ConversionPattern" value="%-5p: %c - %m%n" />
		</layout>
	</appender>
    <appender name="util" class="org.apache.log4j.FileAppender">
        <param name="File" value="C:\\ITLab\\logs\\GeneralLogs.log" />
        <param name="Append" value="true" />
        <layout class="org.apache.log4j.PatternLayout">
          <param name="ConversionPattern" value="%t %-5p %c{2} - %m%n"/>
        </layout>           
     </appender>
	<!-- Application Loggers -->
	<logger name="com.hp.gcc">
		<level value="info" />
	</logger>
	<!-- 3rdparty Loggers -->
	<logger name="org.springframework.core">
		<level value="info" />
	</logger>
	<logger name="org.springframework.beans">
		<level value="info" />
	</logger>
	<logger name="org.springframework.context">
		<level value="info" />
	</logger>
	<logger name="org.springframework.web">
		<level value="info" />
	</logger>
	<!-- Root Logger -->
	<root>
		<priority value="warn" />
		<appender-ref ref="console" />
	</root>
</log4j:configuration>

-----------------------------------------------------------------------------------------------------------------------------
jdbc.properties - WEB-INF
-----------------------------------------------------------------------------------------------------------------------------
jdbc.driverClassName=com.mysql.jdbc.Driver
jdbc.dialect=org.hibernate.dialect.MySQLDialect
jdbc.databaseurl=jdbc:mysql://localhost:3306/userdatabase
jdbc.username=root
jdbc.password=rays@123

-------------------------------------------------------------------
postgresql configuration for database connection 
----------------------------------------------------------------------
jdbc.driverClassName=org.postgresql.Driver 
jdbc.dialect=org.hibernate.dialect.PostgreSQLDialect
jdbc.databaseurl=jdbc:postgresql://localhost:3306/userdatabase
jdbc.username=root
jdbc.password=rays@123

----------------------------------------------------------------------------------------------------------------------------
spring-servlet.xml - WEB-INF
----------------------------------------------------------------------------------------------------------------------------
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jee="http://www.springframework.org/schema/jee" 
	xmlns:lang="http://www.springframework.org/schema/lang"
	xmlns:p="http://www.springframework.org/schema/p" 
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee.xsd
        http://www.springframework.org/schema/lang http://www.springframework.org/schema/lang/spring-lang.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">
	<context:annotation-config />
	<context:component-scan base-package="com.rajesh" />	
	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"
		p:location="/WEB-INF/jdbc.properties" />
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close"
    	 p:driverClassName="${jdbc.driverClassName}"
		p:url="${jdbc.databaseurl}" 
		p:username="${jdbc.username}" 
		p:password="${jdbc.password}" />
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation">
			<value>classpath:hibernate.cfg.xml</value>
		</property>
		<property name="configurationClass">
			<value>org.hibernate.cfg.AnnotationConfiguration</value>
		</property>
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">${jdbc.dialect}</prop>
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.hbm2ddl.auto">update</prop>
			</props>
		</property>
	</bean>
	<bean id="viewResolver" class="org.springframework.web.servlet.view.UrlBasedViewResolver">
	    <property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/>
	    <property name="prefix" value="/WEB-INF/jsp/"/>
	    <property name="suffix" value=".jsp"/>
	</bean>
	<tx:annotation-driven/>
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>	
</beans>

-----------------------------------------------------------------------------------------------------------------------------
web.xml - WEB-INF
-----------------------------------------------------------------------------------------------------------------------------
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd" id="WebApp_ID" version="3.0">
  <display-name>CrudOperation-OneToOne</display-name>
  <context-param>
	<param-name>log4jConfigLocation</param-name>
	<param-value>classpath:log4j.xml</param-value>
  </context-param>
  <listener>
	<listener-class>org.springframework.web.util.Log4jConfigListener</listener-class>
  </listener>
  <servlet>
	<servlet-name>spring</servlet-name>
	<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
	<init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>/WEB-INF/spring-servlet.xml</param-value>
        </init-param>
	<load-on-startup>1</load-on-startup>
  </servlet>
  <servlet-mapping>
	<servlet-name>spring</servlet-name>
	<url-pattern>*.html</url-pattern>
  </servlet-mapping>
  <welcome-file-list>
    <welcome-file>addCategory.html</welcome-file>
  </welcome-file-list>
</web-app>

----------------------------------------------------------------------------------------------------------------------------
addCategory.jsp - WEB-INF/jsp/
----------------------------------------------------------------------------------------------------------------------------
<%@ page language="java" contentType="text/html; charset=ISO-8859-1"
    pageEncoding="ISO-8859-1"%>
    <%@taglib uri="http://www.springframework.org/tags/form" prefix="form" %>
    <%@taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %>
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<title>Add Category</title>
</head>
<body><center>
	<h2>Add New Category</h2>
	<h2><a href="addProduct.html">Add Product</a></h2>
	<form:form action="/CrudOperation-OneToOne/saveCategory.html" method="POST">
		<table>
			<tr>
				<td><form:label path="cid">Category Id :</form:label></td>
				<td><form:input path="cid" readonly="true"/></td>
			</tr>
			<tr>
				<td><form:label path="categoryname">Category Name :</form:label></td>
				<td><form:input path="categoryname" value="${category.categoryname}"/></td>
			</tr>
			<tr>
       		<tr>
  				<td>&nbsp;</td>
         		<td><input type="submit" value="SAVE"/></td>
         	</tr>
		</table>
	</form:form>
	<br/>
	<c:if test="${!empty categories }">
		<table align="center" border="1">
			<tr>
				<th>Category ID</th>
				<th>Category Name</th>
				<th>Actions</th>
			</tr>
			<c:forEach items="${categories}" var="category">
			<tr>
				<td><c:out value="${category.cid}"/></td>
				<td><c:out value="${category.categoryname}"/></td>
				<td align="center"><a href="editCategory.html?cid=${category.cid}">Edit</a> | <a href="deleteCategory.html?cid=${category.cid}">Delete</a></td>
			</tr>
			</c:forEach>		
		</table>
	</c:if>
</center>
</body>
</html>

----------------------------------------------------------------------------------------------------------------------------
addProduct.jsp - WEB-INF/jsp/
----------------------------------------------------------------------------------------------------------------------------
<%@ page language="java" contentType="text/html; charset=ISO-8859-1"
    pageEncoding="ISO-8859-1"%>
    <%@taglib uri="http://www.springframework.org/tags/form" prefix="form" %>
    <%@taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %>
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<title>Add Product</title>
</head>
<body><center>
	<h2>Add New Products</h2>
	<h2><a href="addCategory.html">Adding Category</a></h2>
	<form:form action="/CrudOperation-OneToOne/saveProduct.html" method="POST">
		<table>
			<tr>
				<td><form:label path="pid">Product ID:</form:label></td>
				<td><form:input path="pid" value="${product.pid}" readonly="true"/></td>
			</tr>
			<tr>
				<td><form:label path="name">Product Name:</form:label></td>
				<td><form:input path="name" value="${product.name}"/></td>
			</tr>
			<tr>
				<td><form:label path="code">Product Code:</form:label></td>
				<td><form:input path="code" value="${product.code}"/></td>
			</tr>
			<tr>
				<td><form:label path="price">Product Price:</form:label></td>
				<td><form:input path="price" value="${product.price}"/></td>
			</tr>
			<tr>
				<td><form:label path="category.cid">Product Category: </form:label></td>
				<td><form:select path="category.cid" cssStyle="width:150px;">
					<option value="-1">Select a Type</option>
					<c:forEach items="${categories}" var="category">
						<option value="${category.cid}">${category.categoryname}</option>
					</c:forEach>
				</form:select>
				</td>
			</tr>
			<tr>
				<td><form:label path="unit">Product Unit:</form:label></td>
				<td><form:input path="unit" value="${product.unit}"/></td>
			</tr>
			 <tr>
         		<td>&nbsp;</td>
         		<td><input type="submit" value="SAVE"/></td>
        	</tr>
		</table>
	</form:form>
	<br/>
	<c:if test="${!empty products}">
 		<table align="center" border="1">
			  <tr>
				   <th>Product ID</th>
				   <th>Product Name</th>
				   <th>Product Code</th>
				   <th>Product Price</th>
				   <th>Product Category</th>
				   <th>Product Unit</th>
				   <th>Actions</th>
			  </tr>
  			  <c:forEach items="${products}" var="product">
			  <tr>
				    <td><c:out value="${product.pid}"/></td>
				    <td><c:out value="${product.name}"/></td>
				    <td><c:out value="${product.code}"/></td>
				    <td><c:out value="${product.price}"/></td>
				    <td><c:out value="${product.category.categoryname}"/></td>
				    <td><c:out value="${product.unit}"/></td>
				    <td align="center"><a href="editProduct.html?pid=${product.pid}">Edit</a> | <a href="deleteProduct.html?pid=${product.pid}">Delete</a></td>
			  </tr>
  		      </c:forEach>
 		</table>
	</c:if>
</center>
</body>
</html>